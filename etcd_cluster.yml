---

- hosts: etcd_cluster
  become: true
  become_method: sudo
  any_errors_fatal: true
  gather_facts: true
  vars_files:
    - vars/main.yml
    - vars/system.yml

  pre_tasks:
    - name: Include OS-specific variables
      include_vars: "vars/{{ ansible_os_family }}.yml"
      when: not ansible_os_family == 'Rocky' and not ansible_os_family == 'AlmaLinux'
      tags: always

    # For compatibility with Ansible old versions
    # (support for RockyLinux and AlmaLinux has been added to Ansible 2.11)
    - name: Include OS-specific variables
      include_vars: "vars/RedHat.yml"
      when: ansible_os_family == 'Rocky' or ansible_os_family == 'AlmaLinux'
      tags: always

    - name: Update apt cache
      apt:
        update_cache: true
        cache_valid_time: 3600
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      environment: "{{ proxy_env | default({}) }}"
      when: ansible_os_family == "Debian" and installation_method == "repo"

    - name: Make sure the gnupg and apt-transport-https packages are present
      apt:
        pkg:
          - gnupg
          - apt-transport-https
        state: present
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      environment: "{{ proxy_env | default({}) }}"
      when: ansible_os_family == "Debian" and installation_method == "repo"

    - name: Build a firewall_ports_dynamic_var
      set_fact:
        firewall_ports_dynamic_var: "{{ firewall_ports_dynamic_var | default([]) + (firewall_allowed_tcp_ports_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when: firewall_enabled_at_boot|bool
      tags: firewall

    - name: Build a firewall_rules_dynamic_var
      set_fact:
        firewall_rules_dynamic_var: "{{ firewall_rules_dynamic_var | default([]) + (firewall_additional_rules_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when: firewall_enabled_at_boot|bool
      tags: firewall

  roles:
    - role: ansible-role-firewall
      environment: "{{ proxy_env | default({}) }}"
      vars:
        firewall_allowed_tcp_ports: "{{ firewall_ports_dynamic_var | unique }}"
        firewall_additional_rules: "{{ firewall_rules_dynamic_var | unique }}"
      when: firewall_enabled_at_boot|bool
      tags: firewall

    - role: hostname
    - role: resolv_conf
    - role: sysctl
    - role: timezone
    - role: ntp

    - role: etcd

...